<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" elementFormDefault="qualified"
    vc:minVersion="1.1" version="0.1">
    <!-- parking the namespace for now. Not used yet.
    targetNamespace="https://github.com/bartneck/swiML"
    xmlns="https://github.com/bartneck/swiML"  
    -->

    <xs:element name="program">

        <!-- ====================================================== -->
        <!-- The meta information for each program -->
        <!-- ====================================================== -->
        <xs:complexType>
            <xs:sequence>
                <xs:element name="title" type="titleString">
                    <xs:annotation>
                        <xs:documentation>A short title of the program.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="1" name="author">
                    <xs:annotation>
                        <xs:documentation>Each program can have one or more
                            authors.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="firstName" minOccurs="0" type="xs:string">
                                <xs:annotation>
                                    <xs:documentation>The first name of the author. Can contain
                                        middle names if necessary.</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="lastName" minOccurs="0" type="xs:string">
                                <xs:annotation>
                                    <xs:documentation>The last name of the
                                        author.</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element minOccurs="0" name="email" type="emailAddress">
                                <xs:annotation>
                                    <xs:documentation>The email address of the author
                                        (optional).</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="programDescription" type="descriptionString" minOccurs="0"
                    maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>A short description for the program.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="1" name="creationDate" type="xs:date" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The date on which the program was
                            created.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="1" name="poolLength" type="xs:nonNegativeInteger"
                    maxOccurs="1" default="25">
                    <xs:annotation>
                        <xs:documentation>Swim programs require a targeted pool length. This is
                            necessary if swimming instructions are given in laps. While any swim
                            program defined for a 50 meter pool can be swum in a 25 meter pool, the
                            reverse cannot be guranteed.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="1" name="poolLengthUnit" type="poolLengthUnits" maxOccurs="1"
                    default="meters">
                    <xs:annotation>
                        <xs:documentation>The length of pool requires a measurement
                            unit.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- All length information for all instruction will use this unit -->
                <xs:element name="defaultInstructionLengthUnit" minOccurs="1" maxOccurs="1"
                    type="lengthUnitType">
                    <xs:annotation>
                        <xs:documentation>All length information for all instruction will use this
                            unit.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <!-- ====================================================== -->
                <!-- The main element(s) for each program. Each instruction can contain instructions. This is recursion. -->
                <!-- This is the main recursive element for a program -->
                <!-- ====================================================== -->

                <xs:element name="instruction" type="instructionType" minOccurs="1"
                    maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The basic elements for programs. Each instruction defines
                            what to swim.</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!-- ====================================================== -->
    <!-- The types used for the meta information -->
    <!-- ====================================================== -->

    <!-- The definition of the valid email address -->
    <xs:simpleType name="emailAddress">
        <xs:annotation>
            <xs:documentation>The pattern checks for valid email addresses.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[^@]+@[^\.]+\..+"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- The definition of the program title restriction in length -->
    <xs:simpleType name="titleString">
        <xs:annotation>
            <xs:documentation>The length of the title is constraint in length.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="60"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- The definition of the program description restriction in length -->
    <xs:simpleType name="descriptionString">
        <xs:annotation>
            <xs:documentation>The length of the description text is constraint in
                length.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="400"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Units of measurement for pool length -->
    <xs:simpleType name="poolLengthUnits">
        <xs:annotation>
            <xs:documentation>The unit of measurement for the length of the target pool (meter or
                yards).</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="meters"/>
            <xs:enumeration value="yards"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- The offical pool length sizes (not yet used) -->
    <!-- to do: co-occurance of official and unofficial pool length -->
    <xs:simpleType name="poolLengthSizes">
        <xs:restriction base="xs:decimal">
            <xs:enumeration value="25"/>
            <xs:enumeration value="33.3"/>
            <xs:enumeration value="50"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- ====================================================== -->
    <!-- The basic type for all instructions. It can be either a -->
    <!-- process element or a direction instruction on what to swim -->
    <!-- ====================================================== -->

    <!-- The fundamental building block of all swimmming programs -->
    <xs:complexType name="instructionType" mixed="true">
        <xs:annotation>
            <xs:documentation>An instruction can consiset of process or a direct instruction on what
                to swim.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:annotation>
                <xs:documentation>The different types of instructions,</xs:documentation>
            </xs:annotation>
            <!-- Process based elements for instructions -->
            <xs:element name="repetition" type="repetitionType">
                <xs:annotation>
                    <xs:documentation>Instruction process element to repeat enclosed
                        instructions.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pyramid" type="pyramidType">
                <xs:annotation>
                    <xs:documentation>Instruction process element to swim a
                        pyramid.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <!-- Direct instruction on what to swim -->
            <xs:sequence>
                <xs:annotation>
                    <xs:documentation>Sequence of basic elements for an
                        instruction.</xs:documentation>
                </xs:annotation>
                <!-- Length as either distance or time -->
                <xs:choice>
                    <xs:annotation>
                        <xs:documentation>Length can be descriped as distance or
                            time.</xs:documentation>
                    </xs:annotation>
                    <xs:element name="lengthAsDistance" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>Length of instruction as distance.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="lengthAsTime" type="xs:duration">
                        <xs:annotation>
                            <xs:documentation>Duration starts with PT followed by int M and int S.
                                For example PT1M30S for 1:30.</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:choice>
                <!-- optional length unit if different from default described in the meta information -->
                <xs:element name="lengthUnit" type="lengthUnitType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Length unit if different from program
                            default.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- Common elements for instrucionts -->
                <xs:group ref="instructionGroup"/>
            </xs:sequence>
        </xs:choice>
    </xs:complexType>

    <!-- ====================================================== -->
    <!-- Group of elements for instruction types and process -->
    <!-- instruction types.  -->
    <!-- ====================================================== -->

    <xs:group name="instructionGroup">
        <xs:sequence>
            <xs:element name="rest" minOccurs="0" maxOccurs="1" type="restType">
                <xs:annotation>
                    <xs:documentation>The rest period after the instruction.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="intensity" minOccurs="0" maxOccurs="1" type="intensityProfile">
                <xs:annotation>
                    <xs:documentation>The intensity at which to swim the
                        instruction.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <!-- The stroke element should not be used if it is already defined in the enclosing repetition -->
            <!-- to do: cross check that only one stroke is defined. -->
            <xs:element name="stroke" minOccurs="0" maxOccurs="1" type="strokeType">
                <xs:annotation>
                    <xs:documentation>The stroke to swim. This includes basic strokes, kicking and
                        drills.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="breath" minOccurs="0" maxOccurs="1" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>Number of arm strokes per breath.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="equipment" minOccurs="0" maxOccurs="unbounded" type="equipmentType">
                <xs:annotation>
                    <xs:documentation>Equipment to be used, such as board or
                        pads.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="instructionDescription" type="instructionDescriptionType"
                minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Short description to modify the instrution.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <!-- ====================================================== -->
    <!-- Process instruction types -->
    <!-- These types control the structural flow of the  -->
    <!-- instructions.  -->
    <!-- ====================================================== -->

    <!-- The repetitionType is one of the major process elements -->
    <xs:complexType name="repetitionType">
        <xs:annotation>
            <xs:documentation/>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="repetitionCount" type="xs:nonNegativeInteger" minOccurs="1"
                maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Count of repetition.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <!-- Stroke needs to be included to express indivdual medley repetitions -->
            <!-- If stroke is defined here it overwrites the stroke within the repeition -->
            <!-- to do: validate that stroke only occurs once. Either in repetition or instruction in repetition -->
            <xs:element name="stroke" minOccurs="0" maxOccurs="1" type="strokeType">
                <xs:annotation>
                    <xs:documentation>Stroke information for all items in the repeition. In
                        particular individual medley.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="intensity" minOccurs="0" maxOccurs="1" type="intensityProfile">
                <xs:annotation>
                    <xs:documentation>Intensity infomration for all items in the repetition. For
                        example, the intensity migh increase between the items in the
                        repetition.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="repetitionDescription" minOccurs="0" maxOccurs="1"
                type="instructionDescriptionType">
                <xs:annotation>
                    <xs:documentation>Additional information for the repetition. This can be used to
                        customise the repetition.</xs:documentation>
                </xs:annotation>
            </xs:element>

            <!-- This is the main recursion statement. Every repetition contains instructions. -->
            <!-- Every instruction can contain a repetition -->
            <xs:element name="instruction" minOccurs="1" maxOccurs="unbounded"
                type="instructionType">
                <xs:annotation>
                    <xs:documentation>A repetition can include any number of instructions, which in
                        turn can contain repetitions.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- A pyramid is a common structure element for programs. -->
    <xs:complexType name="pyramidType">
        <xs:annotation>
            <xs:documentation>Pyramids start with short instructions (e.g. 50) and increase to their
                stop length (e.g. 200). They then decrease back to the start
                length.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="startLength" minOccurs="1" maxOccurs="1" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>The start length of the pyramid.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="startlengthUnit" type="lengthUnitType" minOccurs="0" maxOccurs="1"/>

            <xs:element name="stopLength" minOccurs="1" maxOccurs="1" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>The stop length of the pyramid. This is the highest point of
                        the pyramid.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="stoplengthUnit" type="lengthUnitType" minOccurs="0" maxOccurs="1"/>

            <xs:element name="increment" minOccurs="1" maxOccurs="1" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>The increment at which the pyramid increases. This defines the
                        slope.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="incremenentLengthUnit" type="lengthUnitType" minOccurs="0"
                maxOccurs="1"/>

            <xs:element name="isPointy" minOccurs="1" maxOccurs="1" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>A pointy pyramid swims the stop length only once. A non-pointy
                        pyramid swims the stop length twice.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="instructionGroup"/>
        </xs:sequence>
    </xs:complexType>

    <!-- ====================================================== -->
    <!-- The types used for the instructions -->
    <!-- ====================================================== -->

    <!-- Swimming instructions can be given in these units -->
    <!-- this is currently not used. It would force the unit to be  -->
    <!-- explicit with any lenth. Using a default length is better -->
    <xs:complexType name="lengthType" mixed="true">
        <xs:annotation>
            <xs:documentation>The length units for a swimming instruction.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="meters" type="xs:nonNegativeInteger"/>
            <xs:element name="laps" type="xs:nonNegativeInteger"/>
            <xs:element name="yards" type="xs:nonNegativeInteger"/>
            <xs:element name="swimDuration" type="xs:duration"/>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="lengthUnitType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="meters"/>
            <xs:enumeration value="laps"/>
            <xs:enumeration value="yards"/>
            <xs:enumeration value="time"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Rest can be given in these ways -->
    <xs:complexType name="restType" mixed="true">
        <xs:annotation>
            <xs:documentation>The length units for a rest after a swimming
                instruction.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="afterStop" type="xs:duration">
                <xs:annotation>
                    <xs:documentation>Duration of rest after stopping a swimming instruction.
                        Example: 20 seconds means that the swimmer will rest for 20 seconds after
                        stopping the current instructions.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="sinceStart" type="xs:duration">
                <xs:annotation>
                    <xs:documentation>The interval on which swimming instructions start. Example: on
                        1:30 means that the next instructions starts after 1:30 from starting the
                        current instruction.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="inOut" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>Number of swimmers arriving. Example: 3rd in: Once the 3rd
                        swimmer in the lane arrives, the 1st swimmer starts.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <!-- Intensity at which an instruction is swum -->
    <xs:complexType name="intensityType">
        <xs:annotation>
            <xs:documentation>The intensity of the instructions.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="precentageEffort" type="percentType">
                <xs:annotation>
                    <xs:documentation>Effort in percentage. Example: 100 means maximum
                        effort.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="zone" type="zoneType">
                <xs:annotation>
                    <xs:documentation>Effort in training zone.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="precentageHeartRate" type="percentType">
                <xs:annotation>
                    <xs:documentation>Heart rate in percentage of maximum heart
                        rate.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <!-- Working out the build option -->
    <xs:complexType name="intensityProfile" mixed="true">
        <xs:choice>
            <xs:element name="staticIntensity" type="intensityType">
                <xs:annotation>
                    <xs:documentation>The intensity is constant during the instruction. The swimmer
                        should swim at the same intensity.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:sequence>
                <xs:annotation>
                    <xs:documentation>The intensity changes from the start to the stop of the
                        instruction. This can be used to define an increasing or decreasing
                        intensity. The swimmer could, for example, start at 70% and speed up to
                        100%.</xs:documentation>
                </xs:annotation>
                <xs:element name="startIntensity" type="intensityType"/>
                <xs:element name="stopIntensity" type="intensityType"/>
            </xs:sequence>
        </xs:choice>
    </xs:complexType>

    <!-- Swimming instructions can be given in these units -->
    <xs:simpleType name="zoneType">
        <xs:annotation>
            <xs:documentation>The intensity zone.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="recovery"/>
            <xs:enumeration value="endurance"/>
            <xs:enumeration value="tempo"/>
            <xs:enumeration value="max"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Percentage as an interger from 0-100 -->
    <xs:simpleType name="percentType">
        <xs:annotation>
            <xs:documentation>The percent type specifies a value from 0 to 100.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="100"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Swimming instructions use these stroke types-->
    <xs:complexType name="strokeType" mixed="true">
        <xs:annotation>
            <xs:documentation>Stroke types.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="standardStroke" type="standardStrokeType"/>
            <xs:element name="kicking" type="kickStyle"/>
            <xs:element name="drill" type="drillType"/>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="standardStrokeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="butterfly"/>
            <xs:enumeration value="backstroke"/>
            <xs:enumeration value="breaststroke"/>
            <xs:enumeration value="freestyle"/>
            <xs:enumeration value="individualMedley"/>
            <xs:enumeration value="reverseIndividualMedley"/>
            <xs:enumeration value="indivdualMedleyOverlap"/>
            <xs:enumeration value="any"/>
            <xs:enumeration value="nr1"/>
            <xs:enumeration value="nr2"/>
            <xs:enumeration value="nr3"/>
            <xs:enumeration value="nr4"/>
            <xs:enumeration value="notButterfly"/>
            <xs:enumeration value="notBackstroke"/>
            <xs:enumeration value="notBreaststroke"/>
            <xs:enumeration value="notFreestyle"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="kickStyle">
        <xs:sequence>
            <xs:element name="orientation" type="orientationType">
                <xs:annotation>
                    <xs:documentation>The orientation of the swimmers body.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="legMovement" type="legMovementType">
                <xs:annotation>
                    <xs:documentation>The style of the leg movements.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="legMovementType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="flutter"/>
            <xs:enumeration value="dolpine"/>
            <xs:enumeration value="scissor"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="orientationType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="front"/>
            <xs:enumeration value="back"/>
            <xs:enumeration value="left"/>
            <xs:enumeration value="ride"/>
            <xs:enumeration value="side"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="equipmentType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="board"/>
            <xs:enumeration value="pads"/>
            <xs:enumeration value="pullBuoy"/>
            <xs:enumeration value="fins"/>
            <xs:enumeration value="snorkle"/>
            <xs:enumeration value="chute"/>
            <xs:enumeration value="stretchCord"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- The equipment list allows for multiple equiopments, but only one of each type -->

    <xs:simpleType name="equipmentList">
        <xs:list itemType="equipmentType"/>
    </xs:simpleType>

    <xs:complexType name="drillType">
        <xs:annotation>
            <xs:documentation>Drill type consists of a drill name and a stroke. For example, this
                could mean 6 kick drill freestyle.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="drillNameType" minOccurs="1" maxOccurs="1"/>
            <xs:element name="drillStroke" type="standardStrokeType" maxOccurs="1" minOccurs="1">
                <xs:annotation>
                    <xs:documentation>Drills are based on stroke types. For example, the drill 123
                        can be swum with freestyle or backstroke.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="drillNameType">
        <xs:annotation>
            <xs:documentation>Drill names.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="6KickDrill"/>
            <xs:enumeration value="fingerTrails"/>
            <xs:enumeration value="123"/>
            <xs:enumeration value="bigDog"/>
            <xs:enumeration value="scull"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- The definition of the instructions description restriction in length -->
    <xs:simpleType name="instructionDescriptionType">
        <xs:annotation>
            <xs:documentation>The length of the description text is constraint in
                length.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="100"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
